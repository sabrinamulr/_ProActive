@* Datei: Components/Pages/Anja/KantinenTeil/KantineWoche.razor *@
@* Seite: KantineWoche *@

@page "/kantine/{AusgewählteWoche:int}"
@page "/diesewoche"
@page "/naechstewoche"
@page "/in2wochen"

@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using ProActive2508.Components.Comps.SearchCbx
@using ProActive2508.Service

@rendermode InteractiveServer

<h2>MENÜPLAN – @Title</h2>
<div class="sub">@Monday.ToString("dd.MM.yyyy", new CultureInfo("de-DE")) – @Friday.ToString("dd.MM.yyyy", new CultureInfo("de-DE"))</div>

@if (Loading)
{
    <p>Lade…</p>
}
else if (HasPlan && !IsEditMode)
{
    <div class="d-flex justify-content-between align-items-center mb-2">
        <strong></strong>
        @if (CanEdit)
        {
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary" @onclick="EnterEditModeAsync">Bearbeiten</button>
                <button class="btn btn-outline-secondary" @onclick="ExportPdfAsync">PDF exportieren</button>
                <button class="btn btn-outline-danger" @onclick="RevokePublicationAsync">Veröffentlichung zurückziehen</button>
            </div>
        }
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Tag</th>
                <th>Menü 1</th>
                <th>Menü 2</th>
                @if (IsMitarbeiter)
                {
                    <th>Aktion</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var d in Days)
            {
                var userHatAuswahlAnDiesemTag = MeineVormerkungen.Contains(d.EintragId1) || MeineVormerkungen.Contains(d.EintragId2);

                <tr>
                    <td class="date">@d.Tag.ToString("dddd, dd.MM.yyyy", new CultureInfo("de-DE"))</td>

                    <td>
                        <div class="d-flex align-items-center gap-2">
                            <span>@d.Menu1</span>
                            @if (d.EintragId1 > 0)
                            {
                                if (IsKoch)
                                {
                                    <span class="badge text-bg-secondary">@GetCount(d.EintragId1)</span>
                                }
                                else if (IsMitarbeiter)
                                {
                                    <input type="radio"
                                           name="@($"tag_{d.MenueplanTagId}")"
                                           checked="@MeineVormerkungen.Contains(d.EintragId1)"
                                           @onchange="() => ToggleReservationExclusive(d.MenueplanTagId, d.EintragId1)" />
                                }
                            }
                        </div>
                    </td>

                    <td>
                        <div class="d-flex align-items-center gap-2">
                            <span>@d.Menu2</span>
                            @if (d.EintragId2 > 0)
                            {
                                if (IsKoch)
                                {
                                    <span class="badge text-bg-secondary">@GetCount(d.EintragId2)</span>
                                }
                                else if (IsMitarbeiter)
                                {
                                    <input type="radio"
                                           name="@($"tag_{d.MenueplanTagId}")"
                                           checked="@MeineVormerkungen.Contains(d.EintragId2)"
                                           @onchange="() => ToggleReservationExclusive(d.MenueplanTagId, d.EintragId2)" />
                                }
                            }
                        </div>
                    </td>

                    @if (IsMitarbeiter)
                    {
                        <td class="text-nowrap">
                            @if (userHatAuswahlAnDiesemTag)
                            {
                                <button class="btn btn-sm btn-outline-danger"
                                        title="Auswahl entfernen"
                                        @onclick="() => RemoveReservationAsync(d.MenueplanTagId)">
                                    Auswahl entfernen
                                </button>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
else if (CanEdit)
{
    <EditForm Model="WochenFormular" OnValidSubmit="SaveAsync" FormName="KantineForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="wocheneintragung">
            @for (int i = 0; i < WochenFormular.Count; i++)
            {
                var wochentag = WochenFormular[i];
                var wochentagstelle = i;

                <div class="day-row">
                    <div class="date">@wochentag.Tag.ToString("dddd, dd.MM.yyyy", new CultureInfo("de-DE"))</div>

                    <div class="menus-3col">
                        <div class="Menueeintragen">
                            <label>Menü 1</label>
                            <SearchCombo TItem="string"
                                         Id="@($"menu1_{wochentagstelle}")"
                                         Items="@wochentag.Menu1Items"
                                         Placeholder="Menü 1 suchen/auswählen"
                                         LabelSelector="@(s => s)"
                                         Search="@wochentag.Menu1Search"
                                         SearchChanged="@(async (string val) => await OnMenuSearchChangedAsync(wochentagstelle, 1, val))"
                                         OnItemSelected="@(async (string val) => await OnMenuSelected(wochentagstelle, 1, val))"
                                         TextCommitted="@(async (string val) => await OnMenuTextCommittedAsync(wochentagstelle, 1, val))" />

                            <label>Menü 2</label>
                            <SearchCombo TItem="string"
                                         Id="@($"menu2_{wochentagstelle}")"
                                         Items="@wochentag.Menu2Items"
                                         Placeholder="Menü 2 suchen/auswählen"
                                         LabelSelector="@(s => s)"
                                         Search="@wochentag.Menu2Search"
                                         SearchChanged="@(async (string val) => await OnMenuSearchChangedAsync(wochentagstelle, 2, val))"
                                         OnItemSelected="@(async (string val) => await OnMenuSelected(wochentagstelle, 2, val))"
                                         TextCommitted="@(async (string val) => await OnMenuTextCommittedAsync(wochentagstelle, 2, val))" />
                        </div>

                        <div class="mid">
                            <label class="head">Allergene</label>

                            <InputText class="form-control"
                                       Value="@wochentag.Menu1Allergene"
                                       ValueChanged="async (string v) => { wochentag.Menu1Allergene = v; await OnAllergeneChanged(wochentagstelle, 1); }"
                                       ValueExpression="() => wochentag.Menu1Allergene"
                                       placeholder="z. B. A, C, G" />

                            <InputText class="form-control"
                                       Value="@wochentag.Menu2Allergene"
                                       ValueChanged="async (string v) => { wochentag.Menu2Allergene = v; await OnAllergeneChanged(wochentagstelle, 2); }"
                                       ValueExpression="() => wochentag.Menu2Allergene"
                                       placeholder="z. B. A, C, G" />
                        </div>

                        <div class="right">
                            <label class="head">Preis (€)</label>

                            <InputNumber TValue="decimal?" class="form-control"
                                         Value="wochentag.Menu1Preis"
                                         ValueChanged="@(async (decimal? v) => { wochentag.Menu1Preis = v; await OnPriceChanged(wochentagstelle, 1); })"
                                         ValueExpression="() => wochentag.Menu1Preis"
                                         step="0.01"
                                         placeholder="0,00" />

                            <InputNumber TValue="decimal?" class="form-control"
                                         Value="wochentag.Menu2Preis"
                                         ValueChanged="@(async (decimal? v) => { wochentag.Menu2Preis = v; await OnPriceChanged(wochentagstelle, 2); })"
                                         ValueExpression="() => wochentag.Menu2Preis"
                                         step="0.01"
                                         placeholder="0,00" />
                        </div>

                    </div>
                </div>
            }
        </div>

        <div class="mt-2 d-flex gap-2">
            <button type="submit" class="btn btn-primary" disabled="@(!IsFormComplete)">Speichern</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEditAsync">Abbrechen</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(Message))
    {
        <div class="alert alert-info mt-2">@Message</div>
    }
}
else
{
    <div class="alert alert-warning">Für diese Woche gibt es noch keinen Plan.</div>
}

